ALLOC	gzip.h	/^#  define ALLOC(type, array, size) { \\$/
Assert	gzip.h	/^#  define Assert(cond,msg) {if(!(cond)) error(msg)/
BLOCK_MODE	unlzw.c	/^int block_mode = BLOCK_MODE; \/* block compress mod/
DECLARE	gzip.c	/^    DECLARE(ush, tab_prefix0, 1L<<(BITS-1));$/
DUMPBITS	inflate.c	/^#define DUMPBITS(n) {b>>=(n);k-=(n);}$/
EXPAND	tailor.h	/^#    define EXPAND(argc,argv) \\$/
EXTERN	gzip.h	/^#  define EXTERN(type, array)  extern type * near /
FLUSH_BLOCK	deflate.c	/^#define FLUSH_BLOCK(eof) \\$/
FREE	gzip.h	/^#  define FREE(array) {if (array != NULL) fcfree(a/
INSERT_STRING	deflate.c	/^#define INSERT_STRING(s, match_head) \\$/
IPos	deflate.c	/^typedef unsigned IPos;$/
LG	gzip.h	/^#define LG(p) ((ulg)(SH(p)) | ((ulg)(SH((p)+2)) <</
MAKE_LEGAL_NAME	tailor.h	/^#    define MAKE_LEGAL_NAME(name)   make_simple_na/
MAX	trees.c	/^#define MAX(a,b) (a >= b ? a : b)$/
MAXCODE	unlzw.c	/^#define MAXCODE(n)	(1L << (n))$/
MIN	unpack.c	/^#define MIN(a,b) ((a) <= (b) ? (a) : (b))$/
Mgetopt	getopt.c	/^main (argc, argv)$/
Mgzip	gzip.c	/^int main (argc, argv)$/
Mspec	spec.c	/^int main (int argc, char *argv[]) {$/
NEEDBITS	inflate.c	/^#define NEEDBITS(n) {while(k<(n)){b|=((ulg)NEXTBYT/
NEXTBYTE	inflate.c	/^#  define NEXTBYTE() \\$/
NLENGTH	gzip.c	/^#  define NLENGTH(dirent) ((int)strlen((dirent)->d/
OF	gzip.c	/^typedef RETSIGTYPE (*sig_type) OF((int));$/
OPEN	tailor.h	/^#  define OPEN(name, flags, mode) open(name, flags/
Pos	deflate.c	/^typedef ush Pos;$/
SET_BINARY_MODE	tailor.h	/^#  define SET_BINARY_MODE(fd) setmode(fd, O_BINARY/
SH	gzip.h	/^#define SH(p) ((ush)(uch)((p)[0]) | ((ush)(uch)((p/
S_ISDIR	gzip.c	/^#  define S_ISDIR(m) (((m) & S_IFMT) == S_IFDIR)$/
S_ISREG	gzip.c	/^#  define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)$/
Trace	gzip.h	/^#  define Trace(x) fprintf x$/
Tracec	gzip.h	/^#  define Tracec(c,x) {if (verbose && (c)) fprintf/
Tracecv	gzip.h	/^#  define Tracecv(c,x) {if (verbose>1 && (c)) fpri/
Tracev	gzip.h	/^#  define Tracev(x) {if (verbose) fprintf x ;}$/
Tracevv	gzip.h	/^#  define Tracevv(x) {if (verbose>1) fprintf x ;}$/
UPDATE_HASH	deflate.c	/^#define UPDATE_HASH(h,c) (h = (((h)<<H_SHIFT) ^ (c/
WARN	gzip.h	/^#define WARN(msg) {if (!quiet) fprintf msg ; \\$/
_getopt_internal	getopt.c	/^_getopt_internal (argc, argv, optstring, longopts,/
a	gzip.h	/^extern void warn          OF((char *a, char *b));$/
abort_gzip	gzip.c	/^RETSIGTYPE abort_gzip()$/
accept	util.c	/^    const char *accept;$/
add_envopt	util.c	/^char *add_envopt(argcp, argvp, env)$/
argcp	gzip.h	/^extern char *add_envopt   OF((int *argcp, char ***/
argvp	gzip.h	/^extern char *add_envopt   OF((int *argcp, char ***/
attr	gzip.h	/^void ct_init     OF((ush *attr, int *method));$/
b	inflate.c	/^int huft_build(b, n, s, d, e, t, m)$/
basename	util.c	/^char *basename(fname)$/
bb	inflate.c	/^ulg bb;                         \/* bit buffer *\/$/
bcopy	gzip.h	/^#  define memcpy(d, s, n)   bcopy((s), (d), (n)) $/
bd	inflate.c	/^int bl, bd;             \/* number of bits decoded /
bi_init	bits.c	/^void bi_init (zipfile)$/
bi_reverse	bits.c	/^unsigned bi_reverse(code, len)$/
bi_windup	bits.c	/^void bi_windup()$/
bitbuf	unpack.c	/^local ulg bitbuf;$/
bk	inflate.c	/^unsigned bk;                    \/* bits in bit buf/
bl	inflate.c	/^int inflate_codes(tl, td, bl, bd)$/
border	inflate.c	/^static unsigned border[] = {    \/* Order of the bi/
buf	gzip.h	/^extern int file_read  OF((char *buf,  unsigned siz/
build_bl_tree	trees.c	/^local int build_bl_tree()$/
build_tree	trees.c	/^local void build_tree(desc)$/
bytes_in	gzip.h	/^extern long bytes_in;   \/* number of input bytes */
bytes_out	gzip.h	/^extern long bytes_out;  \/* number of output bytes /
bzero	gzip.h	/^#  define memzero(s, n)     bzero((s), (n))$/
c	gzip.h	/^#  define Tracec(c,x) {if (verbose && (c)) fprintf/
casemap	tailor.h	/^#  define casemap(c) tolow(c) \/* Force file names /
cc	inflate.c	/^  uch cc;$/
char_type	unlzw.c	/^typedef	unsigned char	char_type;$/
check_match	deflate.c	/^local void check_match(start, match, length)$/
check_ofname	gzip.c	/^local int check_ofname()$/
check_zipfile	unzip.c	/^int check_zipfile(in)$/
chmod	tailor.h	/^#  define chmod(file, mode) (0)$/
clear_bitbuf	unpack.c	/^#define clear_bitbuf() (valid = 0, bitbuf = 0)$/
clear_bufs	util.c	/^void clear_bufs()$/
clear_tab_prefixof	unlzw.c	/^#  define clear_tab_prefixof()	memzero(tab_prefix,/
cmp_code_int	unlzw.c	/^typedef unsigned long 	cmp_code_int;$/
cnt	util.c	/^    unsigned  cnt;$/
code_int	unlzw.c	/^typedef          long   code_int;$/
compress_block	trees.c	/^local void compress_block(ltree, dtree)$/
config	deflate.c	/^} config;$/
copy	util.c	/^int copy(in, out)$/
copy_block	bits.c	/^void copy_block(buf, len, header)$/
copy_stat	gzip.c	/^local void copy_stat(ifstat)$/
count_int	unlzw.c	/^typedef unsigned long 	count_int;$/
count_short	unlzw.c	/^typedef unsigned short	count_short;$/
cpdext	inflate.c	/^static ush cpdext[] = {         \/* Extra bits for /
cpdist	inflate.c	/^static ush cpdist[] = {         \/* Copy offsets fo/
cplens	inflate.c	/^static ush cplens[] = {         \/* Copy lengths fo/
cplext	inflate.c	/^static ush cplext[] = {         \/* Extra bits for /
crc	zip.c	/^local ulg crc;       \/* crc on uncompressed file d/
crc_32_tab	util.c	/^extern ulg crc_32_tab[];   \/* crc table, defined b/
create_outfile	gzip.c	/^local int create_outfile()$/
ct_data	trees.c	/^} ct_data;$/
ct_init	trees.c	/^void ct_init(attr, methodp)$/
ct_tally	trees.c	/^int ct_tally (dist, lc)$/
d	gzip.h	/^#  define memcpy(d, s, n)   bcopy((s), (d), (n)) $/
d_code	trees.c	/^#define d_code(dist) \\$/
debug	spec.c	/^#define debug(level,str)           { if (level<dbg/
debug1	spec.c	/^#define debug1(level,str, a)       { if (level<dbg/
debug2	spec.c	/^#define debug2(level,str, a, b)    { if (level<dbg/
debug3	spec.c	/^#define debug3(level,str, a, b, c) { if (level<dbg/
debug_time	spec.c	/^int debug_time () {$/
decode	unlzh.c	/^local unsigned decode(count, buffer)$/
decode_c	unlzh.c	/^local unsigned decode_c()$/
decode_p	unlzh.c	/^local unsigned decode_p()$/
decode_start	unlzh.c	/^local void decode_start()$/
decrypt	gzip.h	/^extern int decrypt;        \/* flag to turn on decr/
deflate	deflate.c	/^ulg deflate()$/
deflate_fast	deflate.c	/^local ulg deflate_fast()$/
den	gzip.h	/^extern void display_ratio OF((long num, long den, /
dir_type	gzip.c	/^   typedef struct dirent dir_type;$/
display_ratio	util.c	/^void display_ratio(num, den, file)$/
dist	gzip.h	/^int  ct_tally    OF((int dist, int lc));$/
do_exit	gzip.c	/^local void do_exit(exitcode)$/
do_list	gzip.c	/^local void do_list(ifd, method)$/
do_stat	gzip.c	/^local int do_stat(name, sbuf)$/
e	inflate.c	/^int huft_build(b, n, s, d, e, t, m)$/
env	util.c	/^    char *env;           \/* name of environment va/
eof_ok	util.c	/^    int eof_ok;          \/* set if EOF acceptable /
errno	util.c	/^   extern int errno;$/
error	util.c	/^void error(m)$/
exchange	getopt.c	/^exchange (argv)$/
exit_code	gzip.h	/^extern int exit_code;      \/* program exit code *\//
fcalloc	tailor.h	/^#    define fcalloc(nitems,itemsize) halloc((long)/
fcfree	tailor.h	/^#    define fcfree(ptr) hfree(ptr)$/
fd	gzip.h	/^extern void write_buf     OF((int fd, voidp buf, u/
file	util.c	/^    FILE *file;$/
file_read	zip.c	/^int file_read(buf, size)$/
file_t	gzip.h	/^typedef int file_t;     \/* Do not use stdio *\/$/
fill_inbuf	util.c	/^int fill_inbuf(eof_ok)$/
fill_window	deflate.c	/^local void fill_window()$/
fillbuf	unlzh.c	/^local void fillbuf(n)  \/* Shift bitbuf n bits left/
flush_block	trees.c	/^ulg flush_block(buf, stored_len, eof)$/
flush_outbuf	util.c	/^void flush_outbuf()$/
flush_output	inflate.c	/^#define flush_output(w) (wp=(w),flush_window())$/
flush_window	inflate.c	/^#define flush_output(w) (wp=(w),flush_window())$/
fname	util.c	/^    char *fname;$/
gen_bitlen	trees.c	/^local void gen_bitlen(desc)$/
gen_codes	trees.c	/^local void gen_codes (tree, max_code)$/
get_byte	gzip.h	/^#define get_byte()  (inptr < insize ? inbuf[inptr+/
get_char	tailor.h	/^#  define get_char(c) ascii2pascii(get_byte())$/
get_istat	gzip.c	/^local int get_istat(iname, sbuf)$/
get_method	gzip.c	/^int get_method(in)$/
get_suffix	gzip.c	/^local char *get_suffix(name)$/
getbits	unlzh.c	/^local unsigned getbits(n)$/
getopt	getopt.c	/^getopt (argc, argv, optstring)$/
getopt_long	getopt.c	/^getopt_long (argc, argv, options, long_options, op/
header_bytes	gzip.h	/^extern long header_bytes;\/* number of bytes in gzi/
help	gzip.c	/^local void help()$/
huf_decode_start	unlzh.c	/^local void huf_decode_start()$/
huft_build	inflate.c	/^int huft_build(b, n, s, d, e, t, m)$/
huft_free	inflate.c	/^int huft_free(t)$/
hufts	inflate.c	/^unsigned hufts;         \/* track memory usage *\/$/
if	inflate.c	/^  if (inflate_codes(tl, td, bl, bd))$/
ifd	gzip.h	/^extern int  ifd;        \/* input file descriptor */
ifile_size	gzip.h	/^extern long ifile_size; \/* input file size, -1 for/
ifname	gzip.h	/^extern char ifname[];   \/* input file name or "std/
in	gzip.h	/^extern int zip        OF((int in, int out));$/
inflate	inflate.c	/^int inflate()$/
inflate_block	inflate.c	/^int inflate_block(e)$/
inflate_codes	inflate.c	/^int inflate_codes(tl, td, bl, bd)$/
inflate_dynamic	inflate.c	/^int inflate_dynamic()$/
inflate_fixed	inflate.c	/^int inflate_fixed()$/
inflate_stored	inflate.c	/^int inflate_stored()$/
init_block	trees.c	/^local void init_block()$/
init_getbits	unlzh.c	/^local void init_getbits()$/
inptr	gzip.h	/^extern unsigned inptr;  \/* index of next byte to b/
input	unlzw.c	/^#  define input(b,o,c,n,m){ \\$/
insize	gzip.h	/^extern unsigned insize; \/* valid bytes in inbuf *\//
int	gzip.h	/^extern   int (*read_buf) OF((char *buf, unsigned s/
isatty	tailor.h	/^#    define isatty(fd) ((fd) <= 2)$/
isupper	gzip.h	/^#define tolow(c)  (isupper(c) ? (c)-'A'+'a' : (c))/
key	unzip.c	/^char *key;          \/* not used--needed to link cr/
leaves	unpack.c	/^local int leaves [MAX_BITLEN+1]; \/* Number of leav/
len	gzip.h	/^void     copy_block OF((char *buf, unsigned len, i/
level	gzip.h	/^extern int level;          \/* compression level *\//
license	gzip.c	/^local void license()$/
lit_base	unpack.c	/^local int lit_base[MAX_BITLEN+1];$/
literal	unpack.c	/^local uch literal[LITERALS];$/
lm_init	deflate.c	/^void lm_init (pack_level, flags)$/
longest_match	deflate.c	/^int longest_match(cur_match)$/
look_bits	unpack.c	/^#define look_bits(code,bits,mask) \\$/
lzw	lzw.c	/^int lzw(in, out)$/
m	inflate.c	/^int *m;                 \/* maximum lookup bits, re/
make_ofname	gzip.c	/^local int make_ofname()$/
make_simple_name	util.c	/^void make_simple_name(name)$/
make_table	unlzh.c	/^local void make_table(nchar, bitlen, tablebits, ta/
mask_bits	inflate.c	/^ush mask_bits[] = {$/
max_len	unpack.c	/^local int max_len;        \/* maximum bit length of/
memcmp	gzip.h	/^#  define memcmp(s1, s2, n) bcmp((s1), (s2), (n)) /
memcpy	gzip.h	/^#  define memcpy(d, s, n)   bcopy((s), (d), (n)) $/
memzero	gzip.h	/^#  define memzero(s, n)     memset ((voidp)(s), 0,/
method	gzip.h	/^extern int method;         \/* compression method */
my_index	getopt.c	/^my_index (str, chr)$/
my_strlen	getopt.c	/^my_strlen (str)$/
n	inflate.c	/^int huft_build(b, n, s, d, e, t, m)$/
name	util.c	/^    char *name;$/
name_too_long	gzip.c	/^local int name_too_long(name, statb)$/
num	gzip.h	/^extern void display_ratio OF((long num, long den, /
o	unlzw.c	/^#  define input(b,o,c,n,m){ \\$/
ofd	gzip.h	/^extern int  ofd;        \/* output file descriptor /
off_t	gzip.c	/^  typedef long off_t;$/
ofname	gzip.h	/^extern char ofname[];   \/* output file name or "st/
orig_len	unpack.c	/^local ulg orig_len;       \/* original uncompressed/
out	unlzw.c	/^    int in, out;    \/* input and output file descr/
outcnt	gzip.h	/^extern unsigned outcnt; \/* bytes in output buffer /
pack_level	gzip.h	/^void lm_init OF((int pack_level, ush *flags));$/
parents	unpack.c	/^local int parents[MAX_BITLEN+1]; \/* Number of pare/
peek_bits	unpack.c	/^local int peek_bits; \/* Number of peek bits curren/
pqdownheap	trees.c	/^local void pqdownheap(tree, k)$/
pqremove	trees.c	/^#define pqremove(tree, top) \\$/
progname	gzip.h	/^extern char *progname;  \/* program name *\/$/
put_byte	gzip.h	/^#define put_byte(c) {outbuf[outcnt++]=(uch)(c); if/
put_char	tailor.h	/^#  define put_char(c) put_byte((c) & 0x7F)$/
put_long	gzip.h	/^#define put_long(n) { \\$/
put_short	gzip.h	/^#define put_short(w) \\$/
put_ubyte	gzip.h	/^#define put_ubyte(c) {window[outcnt++]=(uch)(c); i/
quiet	gzip.h	/^extern int quiet;          \/* be quiet (-q) *\/$/
ran	spec.c	/^double ran()$/
rcsid	inflate.c	/^static char rcsid[] = "$Id: inflate.c,v 0.14 1993\//
read	gzip.h	/^#define read(a,b,c) spec_read(a,b,c)$/
read_c_len	unlzh.c	/^local void read_c_len()$/
read_error	util.c	/^void read_error()$/
read_pt_len	unlzh.c	/^local void read_pt_len(nn, nbit, i_special)$/
read_tree	unpack.c	/^local void read_tree()$/
reject	util.c	/^    const char *reject;$/
reset_times	gzip.c	/^local void reset_times (name, statb)$/
s	gzip.h	/^#  define memzero(s, n)     memset ((voidp)(s), 0,/
same_file	gzip.c	/^local int same_file(stat1, stat2)$/
save_orig_name	gzip.h	/^extern int save_orig_name; \/* set if original name/
scan_tree	trees.c	/^local void scan_tree (tree, max_code)$/
seekable	gzip.h	/^#define seekable()    0  \/* force sequential outpu/
send_all_trees	trees.c	/^local void send_all_trees(lcodes, dcodes, blcodes)/
send_bits	bits.c	/^void send_bits(value, length)$/
send_code	trees.c	/^#  define send_code(c, tree) send_bits(tree[c].Cod/
send_tree	trees.c	/^local void send_tree (tree, max_code)$/
set_file_type	trees.c	/^local void set_file_type()$/
shorten_name	gzip.c	/^local void shorten_name(name)$/
size	util.c	/^    unsigned size;$/
skip_bits	unpack.c	/^#define skip_bits(bits)  (valid -= (bits))$/
smaller	trees.c	/^#define smaller(tree, n, m) \\$/
spec_init	spec.c	/^int spec_init () {$/
spec_load	spec.c	/^int spec_load (int num, char *filename, int size) /
spec_random_load	spec.c	/^int spec_random_load (int fd) {$/
spec_read	spec.c	/^int spec_read (int fd, unsigned char *buf, int siz/
spec_reset	spec.c	/^int spec_reset(int fd) {$/
spec_rewind	spec.c	/^int spec_rewind(int fd) {$/
spec_write	spec.c	/^int spec_write(int fd, unsigned char *buf, int siz/
stored_len	gzip.h	/^ulg  flush_block OF((char *buf, ulg stored_len, in/
strcspn	util.c	/^int strcspn(s, reject)$/
strequ	gzip.c	/^#define strequ(s1, s2) (strcmp((s1),(s2)) == 0)$/
strlwr	util.c	/^char *strlwr(s)$/
strspn	util.c	/^int strspn(s, accept)$/
t	inflate.c	/^int huft_build(b, n, s, d, e, t, m)$/
tab_prefix	unlzw.c	/^#  define tab_prefixof(i) tab_prefix[i]$/
tab_prefixof	unlzw.c	/^#  define tab_prefixof(i) tab_prefix[i]$/
tab_suffix	unlzw.c	/^#define tab_suffixof(i) tab_suffix[i]$/
tab_suffixof	unlzw.c	/^#define tab_suffixof(i) tab_suffix[i]$/
td	inflate.c	/^int inflate_codes(tl, td, bl, bd)$/
test	gzip.h	/^extern int test;           \/* check .z file integr/
time_stamp	gzip.h	/^extern long time_stamp; \/* original time stamp (mo/
tl	inflate.c	/^int inflate_codes(tl, td, bl, bd)$/
to_stdout	gzip.h	/^extern int to_stdout;      \/* output to stdout (-c/
tolow	gzip.h	/^#define tolow(c)  (isupper(c) ? (c)-'A'+'a' : (c))/
treat_dir	gzip.c	/^local void treat_dir(dir)$/
treat_file	gzip.c	/^local void treat_file(iname)$/
treat_stdin	gzip.c	/^local void treat_stdin()$/
tree_desc	trees.c	/^} tree_desc;$/
try_byte	gzip.h	/^#define try_byte()  (inptr < insize ? inbuf[inptr+/
uch	gzip.h	/^typedef unsigned char  uch;$/
ulg	gzip.h	/^typedef unsigned long  ulg;$/
unlzh	unlzh.c	/^int unlzh(in, out)$/
unlzw	unlzw.c	/^int unlzw(in, out) $/
unpack	unpack.c	/^int unpack(in, out)$/
unsigned	inflate.c	/^int huft_build OF((unsigned *, unsigned, unsigned,/
unzip	unzip.c	/^int unzip(in, out)$/
updcrc	util.c	/^ulg updcrc(s, n)$/
usage	gzip.c	/^local void usage()$/
ush	gzip.h	/^typedef unsigned short ush;$/
valid	unpack.c	/^local int valid;                  \/* number of val/
value	gzip.h	/^void     send_bits  OF((int value, int length));$/
verbose	gzip.h	/^extern int verbose;        \/* be verbose (-v) *\/$/
version	gzip.c	/^local void version()$/
voidp	gzip.h	/^   typedef void *voidp;$/
warn	util.c	/^void warn(a, b)$/
write	gzip.h	/^#define write(a,b,c) spec_write(a,b,c)$/
write_buf	util.c	/^void write_buf(fd, buf, cnt)$/
write_error	util.c	/^void write_error()$/
xmalloc	util.c	/^voidp xmalloc (size)$/
zip	zip.c	/^int zip(in, out)$/
